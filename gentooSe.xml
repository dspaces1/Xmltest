<?xml version="1.0" encoding="UTF-8">

<collection>


    <Reference name="Sed">

        <SubReference name= "Sed examples">
            <Description><![CDATA["Sed works by performing any number of user-specified editing operations ("commands") on the input data. Sed is line-based, so the commands are performed on each line in order. And, sed writes its results to standard output (stdout); it doesn't modify any input files.

Let's look at some examples. The first several are going to be a bit weird because I'm using them to illustrate how sed works rather than to perform any useful task. However, if you're new to sed, it's very important that you understand them.(Look at first command bellow)

If you type this command, you'll get absolutely no output. Now, what happened? In this example, we called sed with one editing command, d. Sed opened the /etc/services file, read a line into its pattern buffer, performed our editing command ("delete line"), and then printed the pattern buffer (which was empty). It then repeated these steps for each successive line. This produced no output, because the d command zapped every single line in the pattern buffer!

There are a couple of things to notice in this example. First, /etc/services was not modified at all. This is because, again, sed only reads from the file you specify on the command line, using it as input -- it doesn't try to modify the file. The second thing to notice is that sed is line-oriented. The d command didn't simply tell sed to delete all incoming data in one fell swoop. Instead, sed read each line of /etc/services one by one into its internal buffer, called the pattern buffer. Once a line was read into the pattern buffer, it performed the d command and printed the contents of the pattern buffer (nothing in this example). Later, I'll show you how to use address ranges to control which lines a command is applied to -- but in the absence of addresses, a command is applied to all lines.

The third thing to notice is the use of single quotes to surround the d command. It's a good idea to get into the habit of using single quotes to surround your sed commands, so that shell expansion is disabled.

The second Command bellow shows of how to use sed to remove the first line of the /etc/services file from our output stream.

As you can see, this command is very similar to our first d command, except that it is preceded by a 1. If you guessed that the 1 refers to line number one, you're right. While in our first example, we used d by itself, this time we use the d command preceded by an optional numerical address. By using addresses, you can tell sed to perform edits only on a particular line or lines."]]>
            </Description>
            <command><![CDATA["$ sed -e 'd' /etc/services

$ sed -e '1d' /etc/services | more"]]>
            </command>
        </SubReference>

        <SubReference name= "Address ranges">
            <Description><![CDATA["The command bellow specifies an address range from 1-10

When we separate two addresses by a comma, sed will apply the following command to the range that starts with the first address, and ends with the second address. In this example, the d command was applied to lines 1-10, inclusive. All other lines were ignored."]]>
            </Description>
            <command><![CDATA["$ sed -e '1,10d' /etc/services | more"]]>
            </command>
        </SubReference>

        <SubReference name= "Addresses with regular expressions">
            <Description><![CDATA["Now, it's time for a more useful example. Let's say you wanted to view the contents of your /etc/services file, but you aren't interested in viewing any of the included comments. As you know, you can place comments in your /etc/services file by starting the line with the '#' character. To avoid comments, we'd like sed to delete lines that start with a '#'. Look at the command below

To understand the '/^#/d' command, we first need to dissect it. First, let's remove the 'd' -- we're using the same delete line command that we've used previously. The new addition is the '/^#/' part, which is a new kind of regular expression address. Regular expression addresses are always surrounded by slashes. They specify a pattern, and the command that immediately follows a regular expression address will only be applied to a line if it happens to match this particular pattern."]]>
            </Description>
            <command><![CDATA["$ sed -e '/^#/d' /etc/services | more"]]>
            </command>
        </SubReference>

        <SubReference name= "Regular expression refresher">
            <Description><![CDATA["We can use regular expressions to express patterns that we may find in the text. If you've ever used the '*' character on the shell command line, you've used something that's similar, but not identical to, regular expressions. Here are the special characters that you can use in regular expressions:

Character       Description
^              Matches the beginning of the line
$              Matches the end of the line
.               Matches any single character
*               Will match zero or more occurrences of the previous character
[ ]             Matches all the characters inside the [ ]

Probably the best way to get your feet wet with regular expressions is to see a few examples. All of these examples will be accepted by sed as valid addresses to appear on the left side of a command. Here are a few:

Regular expression      Description
/./                     Will match any line that contains at least one character
/../                    Will match any line that contains at least two characters
/^#/                    Will match any line that begins with a '#'
/^$/                    Will match all blank lines
/}$/                    Will match any lines that ends with '}' (no spaces)
/} *$/                  Will match any line ending with '}' followed by zero or more spaces
/[abc]/                 Will match any line that contains a lowercase 'a', 'b', or 'c'
/^[abc]/                Will match any line that begins with an 'a', 'b', or 'c'

You can use a regexp(First command bellow). This will cause sed to delete any matching lines. However, it may be easier to get familiar with regular expressions by telling sed to print regexp matches, and delete non-matches, rather than the other way around. This can be done with the Second command bellow.

Note the new '-n' option, which tells sed to not print the pattern space unless explicitly commanded to do so. You'll also notice that we've replaced the d command with the p command, which as you might guess, explicitly commands sed to print the pattern space. Voila, now only matches will be printed."]]>
            </Description>
            <command><![CDATA["$ sed -e '/regexp/d' /path/to/my/test/file | more

$ sed -n -e '/regexp/p' /path/to/my/test/file | more"]]>
            </command>
        </SubReference>

        <SubReference name= "addresses with 2 expressions">
            <Description><![CDATA["Up till now, we've taken a look at line addresses, line range addresses, and regexp addresses. But there are even more possibilities. We can specify two regular expressions separated by a comma, and sed will match all lines starting from the first line that matches the first regular expression, up to and including the line that matches the second regular expression. For example, the following command will print out a block of text that begins with a line containing "BEGIN", and ending with a line that contains "END":

If "BEGIN" isn't found, no data will be printed. And, if "BEGIN" is found, but no "END" is found on any line below it, all subsequent lines will be printed. This happens because of sed's stream-oriented nature -- it doesn't know whether or not an "END" will appear."]]>
            </Description>
            <command><![CDATA["$ sed -n -e '/BEGIN/,/END/p' /my/test/file | more"]]>
            </command>
        </SubReference>

        <SubReference name= "C source example">
            <Description><![CDATA["print out only the main() function in a C source file(First command Bellow)

This command has two regular expressions, '/main[[:space:]]*(/' and '/^}/', and one command, p. The first regular expression will match the string "main" followed by any number of spaces or tabs, followed by an open parenthesis. This should match the start of your average ANSI C main() declaration.

In this particular regular expression, we encounter the '[[:space:]]' character class. This is simply a special keyword that tells sed to match either a TAB or a space. If you wanted, instead of typing '[[:space:]]', you could have typed '[', then a literal space, then Control-V, then a literal tab and a ']' -- The Control-V tells bash that you want to insert a "real" tab rather than perform command expansion. It's clearer, especially in scripts, to use the '[[:space:]]' command class.

OK, now on to the second regexp. '/^}/' will match a '}' character that appears at the beginning of a new line. If your code is formatted nicely, this will match the closing brace of your main() function. If it's not, it won't -- one of the tricky things about performing pattern matching.

The p command does what it always does, explicitly telling sed to print out the line, since we are in '-n' quiet mode. Try running the command on a C source file -- it should output the entire main() { } block, including the initial "main()" and the closing '}'."]]>
            </Description>
            <command><![CDATA["$ sed -n -e '/main[[:space:]]*(/,/^}/p' sourcefile.c | more"]]>
            </command>
        </SubReference>


    </Reference>

</collection>

